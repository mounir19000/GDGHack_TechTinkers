# Generated by Django 5.0 on 2024-02-09 23:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('user_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_email', models.EmailField(max_length=254, unique=True)),
                ('user_Nom', models.CharField(max_length=50)),
                ('user_Prenom', models.CharField(max_length=50)),
                ('user_discord_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('user_is_inter', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organizer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(choices=[('LOG', 'Logistics'), ('COM', 'Communications'), ('MAR', 'Marketing'), ('DEV', 'Development'), ('UI/UX', 'UI/UX'), ('HR', 'Human Resources'), ('MUL', 'Multimedia'), ('DES', 'Design')], max_length=6)),
                ('working_hours', models.CharField(max_length=100)),
                ('tasks_to_do', models.JSONField(default=list)),
                ('organizer_phone_number', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit commencer par 05, 06 ou 07 et contenir 10 chiffres.', regex='^0[567]\\d{8}$')])),
            ],
        ),
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('Nmr_assurance', models.CharField(max_length=10)),
                ('Participant_phone_number', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit commencer par 05, 06 ou 07 et contenir 10 chiffres.', regex='^0[567]\\d{8}$')])),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('auth.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_entreprise', models.CharField(max_length=100)),
                ('email_contact', models.EmailField(max_length=254)),
                ('numero_contact', models.CharField(max_length=15)),
                ('horaires_contact', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='moderateur_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='moderateur_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='GDG_ACK_app.organizer')),
            ],
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='GDG_ACK_app.customuser')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, related_name='custom_user_groups', through='GDG_ACK_app.UserGroup', to='auth.group'),
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth.permission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='GDG_ACK_app.customuser')),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, related_name='custom_user_permissions', through='GDG_ACK_app.UserPermission', to='auth.permission'),
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('customuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='GDG_ACK_app.customuser')),
                ('department', models.CharField(choices=[('LOG', 'Logistics'), ('COM', 'Communications'), ('MAR', 'Marketing'), ('DEV', 'Development'), ('UI/UX', 'UI/UX'), ('HR', 'Human Resources'), ('MUL', 'Multimedia'), ('DES', 'Design')], max_length=6)),
                ('working_hours', models.CharField(max_length=100)),
                ('Mentor_phone_number', models.CharField(max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit commencer par 05, 06 ou 07 et contenir 10 chiffres.', regex='^0[567]\\d{8}$')])),
                ('Mentor_groups', models.ManyToManyField(blank=True, related_name='Mentor_set_groups', to='auth.group')),
                ('Mentor_permissions', models.ManyToManyField(blank=True, related_name='Mentor_set_permissions', to='auth.permission')),
            ],
            options={
                'abstract': False,
            },
            bases=('GDG_ACK_app.customuser',),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('type_event', models.CharField(choices=[('Ideathon', 'Ideathon'), ('Hackathon', 'Hackathon')], max_length=10)),
                ('photo_agenda', models.ImageField(blank=True, upload_to='agenda_photos/')),
                ('date_start', models.DateField()),
                ('date_end', models.DateField()),
                ('winners', models.TextField()),
                ('location', models.TextField()),
                ('cahier_de_charge', models.URLField(blank=True)),
                ('drive_pictures_link', models.URLField(blank=True)),
                ('submission_link', models.URLField(blank=True)),
                ('duration', models.CharField(blank=True, max_length=50)),
                ('state', models.CharField(choices=[('before', 'Before'), ('on_going', 'On Going'), ('after', 'After')], default='before', max_length=10)),
                ('organisateurs', models.ManyToManyField(blank=True, related_name='events_organised', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(blank=True, related_name='events_participated', to=settings.AUTH_USER_MODEL)),
                ('sponsors', models.ManyToManyField(blank=True, related_name='events_sponsored', to='GDG_ACK_app.sponsor')),
                ('mentors', models.ManyToManyField(blank=True, related_name='events_mentored', to='GDG_ACK_app.mentor')),
            ],
        ),
    ]
